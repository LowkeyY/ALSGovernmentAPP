import modelExtend from 'dva-model-extend'
import { model } from 'models/common'
export default modelExtend(model, {
  namespace:'incorrupt',
  state: {

  },
  subscriptions: {
    setup ({ dispatch, history }) {
      history.listen(({ pathname, query, action }) => {
        if (pathname === '/incorrupt') {
          const { id = '', name = '' } = query
          dispatch({
            type: 'updateState',
            payload: {
              id,
              name,
            },
          })
          dispatch({
            type: 'query',
            payload: {
              dataId: id,
            },
          })
        }
      })
    },
  },
  * query ({ payload }, { call, put, select }) {
    alert()
    const { id = '' } = payload,
      result = yield call(queryPartyTabs, { dataId: id })
    if (result) {
      let { data = [], banners = [] } = result,
        { grids, fixedLanmu } = getGrid(data)
      yield put({
        type: 'updateState',
        payload: {

        },
      })
      if (grids.length > 0) {
        const { id = '' } = grids[0]
        yield put({
          type: 'querySelect',
          payload: {
            id,
          },
        })
      } else {
        yield put({
          type: 'updateState',
          payload: {
            lists: [],
          },
        })
      }
    }
  },

})
